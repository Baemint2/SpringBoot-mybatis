<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moz1mozi.mybatis.product.dao.ProductMapper">
    <insert id="insertProduct"
            parameterType="ProductDto">
        <selectKey keyProperty="productId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO PRODUCT_T (PROD_NAME, DESCRIPTION, PROD_PRICE, STOCK_QUANTITY, CATEGORY_ID ,SELLER_ID ,CREATED_AT, MODIFIED_AT)
        VALUES( #{prodName}, #{description}, #{prodPrice}, #{stockQuantity}, #{categoryId} ,#{sellerId}, NOW(), NOW())
    </insert>

    <insert id="insertProductImage"
            parameterType="ImageDto">
        INSERT INTO PRODUCT_IMAGE (PRODUCT_ID, ORIGINAL_FILE_NAME, STORED_FILE_NAME, STORED_URL, CREATED_AT, MODIFIED_AT)
        VALUES (#{productId}, #{originalFileName}, #{storedFileName}, #{storedUrl}, now(), now())
    </insert>

    <delete id="deleteProduct"
            parameterType="ProductDto">
        DELETE
          FROM PRODUCT_T
         WHERE PRODUCT_ID = #{productId}
    </delete>

    <select id="findAllWithImage"
            parameterType="ProductDto">
        SELECT P.PROD_NAME, P.PROD_PRICE, i.original_file_name
          FROM PRODUCT P
          LEFT JOIN product_image i ON p.post_id = i.post_id
    </select>

    <select id="findAllProducts"
            resultType="ProductListDto">
        SELECT P.PROD_NAME, P.PROD_PRICE, I.STORED_URL, MT.USERNAME
        FROM PRODUCT_T P
        LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        LEFT JOIN MEMBER_T MT ON P.SELLER_ID = MT.MEMBER_ID
    </select>

    <select id="getProductByNo"
            resultType="ProductDetailDto">
        select P.PRODUCT_ID, M.USERNAME, I.STORED_URL, P.PROD_NAME,
               P.DESCRIPTION, P.PROD_PRICE, P.STOCK_QUANTITY, M.NICKNAME,
               C.CATEGORY_NAME
        FROM PRODUCT_T P
        LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        LEFT JOIN MEMBER_T M ON P.SELLER_ID = M.MEMBER_ID
        LEFT JOIN CATEGORY_T C ON P.CATEGORY_ID = C.CATEGORY_ID
        WHERE P.PRODUCT_ID = #{productId};
    </select>

    <select id="getPagedProducts"
            resultType="ProductDetailDto">
        SELECT P.PROD_NAME, P.PROD_PRICE, I.STORED_URL, M.nickname,
               P.PRODUCT_ID, P.ROLE
          FROM PRODUCT_T P
        LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        LEFT JOIN MEMBER_T M ON P.SELLER_ID = M.MEMBER_ID
        ORDER BY P.PRODUCT_ID DESC
        LIMIT #{pageSize} OFFSET #{offset};
    </select>

    <resultMap id="ProductWithImage" type="ProductDto">
        <id property="productId" column="productId"/>
        <result property="prodName" column="prodName"/>
        <result property="prodPrice" column="prodPrice"/>
        <result property="description" column="description"/>
        <result property="stockQuantity" column="stockQuantity"/>
        <result property="modifiedAt" column="modifiedAt"/>
        <collection property="imageDtoList" ofType="com.moz1mozi.mybatis.image.dto.ImageDto">
            <id property="imageId" column="imageId"/>
            <result property="storedUrl" column="storedUrl"/>
            <result property="originalFileName" column="originalFileName"/>
            <result property="storedFileName" column="storedFileName"/>
        </collection>
    </resultMap>
    <select id="selectProductById"
            resultMap="ProductWithImage">
        SELECT P.PRODUCT_ID, P.PROD_NAME, P.PROD_PRICE, P.DESCRIPTION , P.STOCK_QUANTITY, P.MODIFIED_AT
             , I.IMAGE_ID, I.STORED_URL, I.ORIGINAL_FILE_NAME, I.STORED_FILE_NAME
          FROM PRODUCT_T P
          LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
         WHERE P.PRODUCT_ID = #{productId};
    </select>
    <update id="updateProduct"
            parameterType="ProductDto">
        UPDATE PRODUCT_T P
           SET PROD_NAME = #{prodName},
               PROD_PRICE = #{prodPrice},
               DESCRIPTION = #{description},
               STOCK_QUANTITY = #{stockQuantity},
               CATEGORY_ID = #{categoryId}
         WHERE P.PRODUCT_ID = #{productId};
    </update>

    <!--검색 기능 추가-->
    <select id="findByCondition"
            parameterType="ProductSearchDto"
            resultType="ProductDetailDto">
        SELECT P.PRODUCT_ID, I.STORED_URL, P.PROD_NAME, P.DESCRIPTION, P.PROD_PRICE,
        P.STOCK_QUANTITY, MT.NICKNAME, P.CATEGORY_ID, C.CATEGORY_NAME
        FROM PRODUCT_T P
        LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        LEFT JOIN MEMBER_T MT ON P.SELLER_ID = MT.MEMBER_ID
        LEFT JOIN CATEGORY_T C ON P.CATEGORY_ID = C.CATEGORY_ID
        WHERE 1=1
        <if test="searchDto.prodName != null">
            AND PROD_NAME LIKE CONCAT('%', #{searchDto.prodName},'%')
        </if>
        <if test="searchDto.nickname != null">
            AND NICKNAME LIKE CONCAT('%', #{searchDto.nickname}, '%')
        </if>
        <if test="searchDto.startPrice != null">
            AND PROD_PRICE &gt;= #{searchDto.startPrice}
        </if>
        <if test="searchDto.endPrice != null">
            AND PROD_PRICE &lt;= #{searchDto.endPrice}
        </if>
        <if test="searchDto.categoryId != null">
            AND P.CATEGORY_ID = #{searchDto.categoryId}
        </if>
        ORDER BY P.PRODUCT_ID DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countByCondition"
            parameterType="ProductSearchDto"
            resultType="long">
        SELECT COUNT(*)
          FROM PRODUCT_T P
          LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
          LEFT JOIN MEMBER_T MT ON P.SELLER_ID = MT.MEMBER_ID
         WHERE 1=1
        <if test="prodName != null">
            AND PROD_NAME LIKE CONCAT('%', #{prodName}, '%')
        </if>
        <if test="nickname != null">
            AND NICKNAME LIKE CONCAT('%', #{nickname}, '%')
        </if>
        <if test="categoryId != null">
            AND P.CATEGORY_ID = #{categoryId}
        </if>
        <if test="startPrice != null and endPrice != null">
            AND PROD_PRICE BETWEEN #{startPrice} AND #{endPrice}
        </if>
    </select>

    <update id="updateStockQuantity" parameterType="StockUpdateDto">
        UPDATE PRODUCT_T
        SET STOCK_QUANTITY = #{adjustment}
        WHERE PRODUCT_ID = #{productId}
    </update>

    <!-- 재고 계산 -->
    <select id="getStockByProductId" parameterType="Long" resultType="int">
        SELECT P.STOCK_QUANTITY
        FROM PRODUCT_T P
        LEFT JOIN CART C ON P.PRODUCT_ID = C.PRODUCT_ID
        WHERE P.PRODUCT_ID = #{productId}
        GROUP BY P.PRODUCT_ID;
    </select>

    <select id="getActualStockByProductId"
            parameterType="long"
            resultType="int">
        SELECT STOCK_QUANTITY
        FROM PRODUCT_T
        WHERE PRODUCT_ID = #{productId}
    </select>

    <update id="increaseStockQuantity"
            parameterType="map">
    UPDATE PRODUCT_T
    SET STOCK_QUANTITY = STOCK_QUANTITY + #{quantity}
    WHERE PRODUCT_ID = #{productId}
    </update>

    <update id="decreaseStockQuantity"
            parameterType="map">
        UPDATE PRODUCT_T
        SET STOCK_QUANTITY = STOCK_QUANTITY - #{quantity}
        WHERE PRODUCT_ID = #{productId}
    </update>
</mapper>