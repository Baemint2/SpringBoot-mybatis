<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moz1mozi.mybatis.product.mapper.ProductMapper">

    <resultMap id="ProductMap" type="ProductDetailDto">
        <id property="prodId" column="prod_id"/>
        <result property="prodName" column="prod_name"/>
        <result property="prodDescription" column="prod_description"/>
        <result property="prodPrice" column="prod_price"/>
        <result property="prodStockQuantity" column="prod_stock_quantity"/>
        <result property="role" column="Role"/>
        <association property="userDto" javaType="UserDto">
            <id property="userId" column="user_id"/>
            <result property="userName" column="user_name"/>
            <result property="userNickname" column="user_nickname"/>
        </association>
        <association property="imageDto" javaType="ImageDto">
            <id property="imageId" column="IMAGE_ID"/>
            <result property="storedUrl" column="STORED_URL"/>
        </association>
        <association property="categoryDto" javaType="CategoryDto">
            <id property="categoryId" column="CATEGORY_ID"/>
            <result property="categoryName" column="CATEGORY_NAME"/>
        </association>
    </resultMap>

    <resultMap id="ProductWithImage" type="ProductDto">
        <id property="prodId" column="prod_id"/>
        <result property="prodName" column="prod_name"/>
        <result property="prodPrice" column="prod_price"/>
        <result property="prodDescription" column="prod_description"/>
        <result property="prodStockQuantity" column="prod_stock_quantity"/>
        <result property="modifiedAt" column="modifiedAt"/>
        <collection property="imageDtoList" ofType="com.moz1mozi.mybatis.image.dto.ImageDto">
            <id property="imageId" column="imageId"/>
            <result property="storedUrl" column="storedUrl"/>
            <result property="originalFileName" column="originalFileName"/>
            <result property="storedFileName" column="storedFileName"/>
        </collection>
    </resultMap>

    <insert id="insertProduct"
            parameterType="ProductDto">
        <selectKey keyProperty="prodId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO Product (
        prod_name, prod_description, prod_price, prod_stock_quantity, cate_id,
        seller_id, created_at, modified_at
        )
        VALUES(
        #{prodName}, #{prodDescription}, #{prodPrice}, #{prodStockQuantity},
        #{cateId} ,#{sellerId}, NOW(), NOW())
    </insert>

    <insert id="insertProductImage"
            parameterType="ImageDto">
        INSERT INTO ProductImage (
        prod_id, pi_original_file_name, pi_stored_file_name, pi_stored_url, created_at, modified_at)
        VALUES (#{prodId}, #{piOriginalFileName}, #{piStoredFileName}, #{piStoredUrl}, now(), now())
    </insert>

    <delete id="deleteProduct"
            parameterType="long">
        DELETE
          FROM Product p
         WHERE p.prod_id = #{prodId}
    </delete>

    <select id="findAllWithImage"
            parameterType="ProductDto">
        SELECT p.prod_name, p.prod_price, i.pi_original_file_name
          FROM Product p
          LEFT JOIN ProductImage i ON p.prod_id = i.prod_id
    </select>

    <select id="findAllProducts"
            resultType="ProductListDto">
        SELECT p.prod_name, p.prod_price, i.pi_stored_url, u.user_name
        FROM Product p
        LEFT JOIN ProductImage i on p.prod_id = i.prod_id
        LEFT JOIN User u ON p.seller_id = u.user_id
    </select>

    <select id="getProductByNo" resultMap="ProductMap">
        SELECT p.prod_id, m.username, i.pi_stored_url, p.prod_name,
               p.prod_description, p.prod_price, p.prod_stock_quantity, m.nickname,
               C.CATEGORY_NAME
        FROM Product p
        LEFT JOIN ProductImage i on p.prod_id = i.prod_id
        LEFT JOIN User u ON p.seller_id = u.user_id
        LEFT JOIN CATEGORY_T C ON p.cate_id = C.CATEGORY_ID
        WHERE p.prod_id = #{prodId};
    </select>

    <select id="selectProductById"
            resultMap="ProductWithImage">
        SELECT P.PRODUCT_ID, P.PROD_NAME, P.PROD_PRICE, P.DESCRIPTION , P.STOCK_QUANTITY, P.MODIFIED_AT
             , I.IMAGE_ID, I.STORED_URL, I.ORIGINAL_FILE_NAME, I.STORED_FILE_NAME
          FROM PRODUCT_T P
          LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
         WHERE P.PRODUCT_ID = #{productId};
    </select>
    <update id="updateProduct"
            parameterType="ProductDto">
        UPDATE PRODUCT_T P
           SET PROD_NAME = #{prodName},
               PROD_PRICE = #{prodPrice},
               DESCRIPTION = #{description},
               STOCK_QUANTITY = #{stockQuantity},
               CATEGORY_ID = #{categoryId}
         WHERE P.PRODUCT_ID = #{productId};
    </update>

    <!--검색 기능 추가-->
    <select id="findByCondition"
            parameterType="ProductSearchDto"
            resultMap="ProductMap">
        SELECT P.PRODUCT_ID, I.STORED_URL, P.PROD_NAME, P.DESCRIPTION, P.PROD_PRICE,
        P.STOCK_QUANTITY, U.user_nickname, P.CATEGORY_ID, C.CATEGORY_NAME
        FROM PRODUCT_T P
        LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
        LEFT JOIN User u ON P.SELLER_ID = u.user_id
        LEFT JOIN CATEGORY_T C ON P.CATEGORY_ID = C.CATEGORY_ID
        WHERE 1=1
        <if test="searchDto.prodName != null">
            AND PROD_NAME LIKE CONCAT('%', #{searchDto.prodName},'%')
        </if>
        <if test="searchDto.nickname != null">
            AND NICKNAME LIKE CONCAT('%', #{searchDto.nickname}, '%')
        </if>
        <if test="searchDto.startPrice != null">
            AND PROD_PRICE &gt;= #{searchDto.startPrice}
        </if>
        <if test="searchDto.endPrice != null">
            AND PROD_PRICE &lt;= #{searchDto.endPrice}
        </if>
        <if test="searchDto.categoryId != null">
            AND P.CATEGORY_ID = #{searchDto.categoryId}
        </if>
        ORDER BY P.PRODUCT_ID DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countByCondition"
            parameterType="ProductSearchDto"
            resultType="long">
        SELECT COUNT(*)
          FROM PRODUCT_T P
          LEFT JOIN PRODUCT_IMAGE I ON P.PRODUCT_ID = I.PRODUCT_ID
          LEFT JOIN User u ON P.SELLER_ID = u.user_id
         WHERE 1=1
        <if test="prodName != null">
            AND PROD_NAME LIKE CONCAT('%', #{prodName}, '%')
        </if>
        <if test="nickname != null">
            AND NICKNAME LIKE CONCAT('%', #{nickname}, '%')
        </if>
        <if test="categoryId != null">
            AND P.CATEGORY_ID = #{categoryId}
        </if>
        <if test="startPrice != null and endPrice != null">
            AND PROD_PRICE BETWEEN #{startPrice} AND #{endPrice}
        </if>
    </select>

    <update id="updateStockQuantity" parameterType="StockUpdateDto">
        UPDATE PRODUCT_T
        SET STOCK_QUANTITY = #{adjustment}
        WHERE PRODUCT_ID = #{productId}
    </update>

    <!-- 재고 계산 -->
    <select id="getStockByProductId" parameterType="Long" resultType="int">
        SELECT P.STOCK_QUANTITY
        FROM PRODUCT_T P
        LEFT JOIN CART C ON P.PRODUCT_ID = C.PRODUCT_ID
        WHERE P.PRODUCT_ID = #{productId}
        GROUP BY P.PRODUCT_ID;
    </select>

    <select id="getActualStockByProductId"
            parameterType="long"
            resultType="int">
        SELECT STOCK_QUANTITY
        FROM PRODUCT_T
        WHERE PRODUCT_ID = #{productId}
    </select>

    <update id="increaseStockQuantity"
            parameterType="map">
    UPDATE PRODUCT_T
    SET STOCK_QUANTITY = STOCK_QUANTITY + #{quantity}
    WHERE PRODUCT_ID = #{productId}
    </update>

    <update id="decreaseStockQuantity"
            parameterType="map">
        UPDATE PRODUCT_T
        SET STOCK_QUANTITY = STOCK_QUANTITY - #{quantity}
        WHERE PRODUCT_ID = #{productId}
    </update>
</mapper>